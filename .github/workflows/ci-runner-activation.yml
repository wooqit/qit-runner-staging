name: CI Runner - Activation Test
on:
  repository_dispatch:
    types: [ cd-test-activation ]
jobs:
  authenticate:
    runs-on: ubuntu-24.04
    env:
      QIT_HOME: ${{ github.workspace }}/qit-home
    steps:
      - name: Checkout code.
        uses: actions/checkout@v4

      - name: Daily Cache Burst.
        run: echo "daily-cache-burst=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          ini-values: "memory_limit=1G"

      - name: Authenticate to QIT
        id: cache-qit-cli-auth
        uses: actions/cache@v4
        with:
          path: qit-home/*.json
          key: ${{ env.daily-cache-burst }}-${{ vars.ENVIRONMENT }}-qit-home-auth

      - name: Enable QIT dev mode
        working-directory: ci/tests/activation
        if: ${{ vars.ENVIRONMENT == 'staging' && steps.cache-qit-cli-auth.outputs.cache-hit != 'true' }}
        run: ./qit dev

      - name: Connect to Staging QIT
        working-directory: ci/tests/activation
        if: ${{ vars.ENVIRONMENT == 'staging' && steps.cache-qit-cli-auth.outputs.cache-hit != 'true' }}
        run: ./qit backend:add --environment="staging" --qit_secret="${{ secrets.MANAGER_SECRET_STAGING }}" --manager_url="https://stagingcompatibilitydashboard.wpcomstaging.com"

      - name: Connect to Production QIT
        working-directory: ci/tests/activation
        if: ${{ vars.ENVIRONMENT == 'production' && steps.cache-qit-cli-auth.outputs.cache-hit != 'true' }}
        run: ./qit partner:add --user="${{ secrets.PARTNER_USER }}" --application_password="${{ secrets.PARTNER_SECRET }}"
  ci-runner-activation:
    runs-on: ubuntu-24.04
    needs: authenticate
    strategy:
      fail-fast: false
      matrix:
        test_run: ${{ github.event.client_payload.test_runs }}
    env:
      QIT_DOCKER_PHP: 'yes'
      QIT_DOCKER_NGINX: 'yes'
      QIT_DOCKER_REDIS: 'yes'
      QIT_DOCKER_MYSQL: 'yes'
      QIT_DOCKER_PLAYWRIGHT: 'yes'
      QIT_HOME: ${{ github.workspace }}/qit-home
      # JOB_ENV_START
      PHP_EXTENSIONS: ${{ toJSON( matrix.test_run.environment.php_extensions ) }}
      QIT_ENABLE_HPOS: ${{ toJSON( matrix.test_run.environment.optional_features.hpos ) }}
      QIT_ENABLE_NEW_PRODUCT_EDITOR: ${{ toJSON( matrix.test_run.environment.optional_features.new_product_editor ) }}
      PHP_VERSION: ${{ github.event.client_payload.shared_matrix_data.php_version }}
      WOOCOMMERCE_VERSION: ${{ matrix.test_run.environment.woocommerce_version }}
      WORDPRESS_VERSION: ${{ matrix.test_run.environment.wordpress_version }}
      SUT_SLUG: ${{ matrix.test_run.sut_slug }}
      SUT_WOO_ID: ${{ matrix.test_run.sut_woo_id }}
      TEST_TYPE: ${{ matrix.test_run.test_type }}
      SUT_VERSION: Undefined
      JOB_NAME: ${{ matrix.test_run.sut_name }} - WP ${{ matrix.test_run.environment.wordpress_version }} - WC ${{ matrix.test_run.environment.woocommerce_version }} - PHP ${{ github.event.client_payload.shared_matrix_data.php_version }}
      # JOB_ENV_END
    # JOB_EXTRA_START
    name: ${{ matrix.test_run.sut_name }} - WP ${{ matrix.test_run.environment.wordpress_version }} - WC ${{ matrix.test_run.environment.woocommerce_version }} - PHP ${{ github.event.client_payload.shared_matrix_data.php_version }}
      # JOB_EXTRA_END
    steps:
      # HEADER_START
      - name: Daily Cache Burst.
        run: echo "daily-cache-burst=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        
      - name: Yesterday Cache Burst.
        run: echo "yesterday-cache-burst=$(date -u -d 'yesterday' +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Set dynamic environment variables.
        run: |
          echo "TEST_TYPE_CACHE_DIR=$GITHUB_WORKSPACE/ci/cache/test-type/${{ matrix.test_run.test_type }}" >> $GITHUB_ENV
          echo "WP_CLI_CACHE_DIR=$GITHUB_WORKSPACE/ci/cache/test-type/${{ matrix.test_run.test_type }}/wp-cli" >> $GITHUB_ENV
          echo "PLAYWRIGHT_BROWSERS_PATH=$GITHUB_WORKSPACE/ci/cache/test-type/${{ matrix.test_run.test_type }}/playwright-browsers" >> $GITHUB_ENV
        
      - name: Plugin Under Test - ${{ matrix.test_run.sut_name }}
        run: echo "Starting test for plugin \"${{ matrix.test_run.sut_name }}\""
        
      - name: Generate a unique id
        id: gen-id
        if: always()
        run: |
          echo "rand=$(openssl rand -hex 3)" >> "$GITHUB_OUTPUT"
          
      - name: Remove special characters from JOB_NAME
        if: always()
        run: |
          echo "CLEAN_JOB_NAME=$(echo $JOB_NAME | tr -cd '[:alnum:]')" >> $GITHUB_ENV
        
      - name: Checkout code.
        uses: actions/checkout@v4
      # HEADER_END

      # CLI_SETUP
      - name: CI CLI Cache
        id: cache-ci-cli
        uses: actions/cache@v4
        with:
          path: ci/cli/vendor
          key: ${{ hashFiles( 'ci/cli/composer.lock' ) }}

      - name: CI CLI Setup
        if: steps.cache-ci-cli.outputs.cache-hit != 'true'
        working-directory: ci/cli
        run: composer install --no-interaction --no-progress --no-suggest --prefer-dist --optimize-autoloader --no-dev
      # CLI_SETUP_END

      # UPDATE_TEST_STATUS_START
      - name: Notify Manager That Test Has Started
        id: test-in-progress
        working-directory: ci/cli
        env:
          TEST_RUN_ID: ${{ matrix.test_run.test_run_id }}
          CI_SECRET: ${{ secrets.CI_SECRET }}
          CI_STAGING_SECRET: ${{ secrets.CI_STAGING_SECRET }}
          MANAGER_HOST: ${{ github.event.client_payload.shared_matrix_data.manager_host }}
          RESULTS_ENDPOINT: ${{ github.event.client_payload.shared_matrix_data.in_progress_endpoint }}
          TEST_RUN_HASH: ${{ matrix.test_run.custom_payload.hash }}
          WORKFLOW_ID: ${{ github.run_id }}
          CANCELLED: ${{ steps.workflow-cancelled.outputs.cancelled }}
        run: php src/cli.php notify -s
      # UPDATE_TEST_STATUS_END

      # DOCKER_CACHE_START
      - name: Restore Bundle Docker Image Cache
        id: cache-docker-bundle
        uses: actions/cache@v4
        with:
          fail-on-cache-miss: false
          path: ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}
          key: ${{ env.daily-cache-burst }}-cache-docker-bundle-php-${{ github.event.client_payload.shared_matrix_data.php_version }}
          restore-keys: | # Allow to restore from last day cache if current day doesn't exist.
            ${{ env.yesterday-cache-burst }}-cache-docker-bundle-php-${{ github.event.client_payload.shared_matrix_data.php_version }}

      - name: Restore Redis Image from Bundle
        if: env.QIT_DOCKER_REDIS == 'yes' && steps.cache-docker-bundle.outputs.cache-hit == 'true'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/redis/image.tar

      - name: Restore MySQL Image from Bundle
        if: env.QIT_DOCKER_MYSQL == 'yes' && steps.cache-docker-bundle.outputs.cache-hit == 'true'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/mysql/image.tar

      - name: Restore PHP Image from Bundle
        if: env.QIT_DOCKER_PHP == 'yes' && steps.cache-docker-bundle.outputs.cache-hit == 'true'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/image.tar

      - name: Restore Nginx Image from Bundle
        if: env.QIT_DOCKER_NGINX == 'yes' && steps.cache-docker-bundle.outputs.cache-hit == 'true'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/nginx/image.tar

      - name: Restore Playwright-Related Images from Bundle
        if: env.QIT_DOCKER_PLAYWRIGHT == 'yes' && steps.cache-docker-bundle.outputs.cache-hit == 'true'
        run: |
            docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/playwright/image.tar
            docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/zip/image.tar
            docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/busybox/image.tar
      # DOCKER_CACHE_END

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          # PS: This PHP version is unrelated to which PHP version will run the test. This is only to run the scripts in GitHub.
          php-version: '8.3'
          ini-values: "memory_limit=1G"

      # DOWNLOAD_PLUGINS_START
      - name: Create Plugin Directories
        working-directory: ci
        run: mkdir -p plugins & mkdir -p themes
      
      - name: Download Plugin Activation Stack
        working-directory: ci/cli
        env:
          TOKEN: ${{ secrets.TOKEN }}
          ACCEPT_HEADER: ${{ secrets.ACCEPT_HEADER }}
          WOO_DOWNLOAD_URL: ${{ secrets.WOO_DOWNLOAD_URL }}
          SHA_URL: ${{ secrets.SHA_URL }}
          CI_ENCRYPTION_KEY: ${{ secrets.CI_ENCRYPTION_KEY }}
          SHA_POSTFIELDS: ${{ secrets.SHA_POSTFIELDS }}
          PLUGINS_ZIPS: ${{ toJSON( github.event.client_payload.shared_matrix_data.plugin_zips ) }}
          PLUGINS_JSON: ${{ toJSON( matrix.test_run.plugins ) }}
          THEME_DIRECTORY: ${{ github.workspace }}/ci/themes
          PLUGIN_DIRECTORY: ${{ github.workspace }}/ci/plugins
          SKIP_CACHE: true
        run: php src/cli.php download-plugins
      # DOWNLOAD_PLUGINS_END

      # FIND_ENTRY_POINT_START
      - name: Identify Plugin or Theme Entry Point
        working-directory: ci/bin
        id: find_entry
        env:
          PARENT_DIRECTORY: ${{ github.workspace }}/ci/${{ matrix.test_run.sut_type }}s
          PLUGIN_TYPE: ${{ matrix.test_run.sut_type }}
          PLUGIN_SLUG: ${{ matrix.test_run.sut_slug }}
          GITHUB_OUTPUT: $GITHUB_OUTPUT
        run: php find-plugin-entrypoint.php ${{ env.PARENT_DIRECTORY }} ${{ env.PLUGIN_SLUG }} ${{ env.PLUGIN_TYPE }}

      - name: Display Extracted Information
        run: |
          echo "Plugin/Theme Directory: ${{ steps.find_entry.outputs.plugin_directory }}"
          echo "Entry Point File: ${{ steps.find_entry.outputs.entry_point }}"
      # FIND_ENTRY_POINT_END

      # SUT_VERSION_START
      - name: Get SUT version (Debug)
        if: always()
        run: ls -la $GITHUB_WORKSPACE/ci/${{ matrix.test_run.sut_type }}s && ls -la $GITHUB_WORKSPACE/ci/${{ matrix.test_run.sut_type }}s/${{ steps.find_entry.outputs.plugin_directory }}
        
      - name: Get SUT version (Debug)
        if: always()
        id: sut-version
        working-directory: ci/cli
        env:
          PLUGIN_DIRECTORY: ${{ github.workspace }}/ci/${{ matrix.test_run.sut_type }}s/${{ steps.find_entry.outputs.plugin_directory }}
          PLUGIN_TYPE: ${{ matrix.test_run.sut_type }}
          PLUGIN_SLUG: ${{ steps.find_entry.outputs.entry_point }}
        run: php src/cli.php header -o Version
      # SUT_VERSION_END

      - name: QIT CLI Cache
        id: cache-qit-cli
        uses: actions/cache@v4
        with:
          path: qit-home/cache
          key: ${{ env.daily-cache-burst }}-${{ vars.ENVIRONMENT }}-qit-home-cache

      - name: QIT Authentication Cache
        id: cache-qit-cli-auth
        uses: actions/cache@v4
        with:
          path: qit-home/*.json
          fail-on-cache-miss: true
          key: ${{ env.daily-cache-burst }}-${{ vars.ENVIRONMENT }}-qit-home-auth

      - name: Run Plugin Activation Test & Notify Manager
        working-directory: ci/tests/activation
        env:
          # Other envs are inherited from the job.
          PLUGIN_SLUG: ${{ matrix.test_run.sut_slug }}
          PLUGIN_TYPE: ${{ matrix.test_run.sut_type }}
          PLUGINS_JSON: ${{ toJSON( matrix.test_run.plugins ) }}
          TEST_RUN_ID: ${{ matrix.test_run.test_run_id }}
          QIT_WRITE_MANAGER_NOTIFIED: ${{ github.workspace }}/manager-notified.txt
        run: php run-activation-test.php

      - name: Debug CI
        if: always()
        run: ls -la ${{ github.workspace }}

      - name: Maybe mark test as cancelled
        if: always()
        working-directory: ci/cli
        env:
          TEST_RUN_ID: ${{ matrix.test_run.test_run_id }}
          CI_SECRET: ${{ secrets.CI_SECRET }}
          CI_STAGING_SECRET: ${{ secrets.CI_STAGING_SECRET }}
          MANAGER_HOST: ${{ github.event.client_payload.shared_matrix_data.manager_host }}
          RESULTS_ENDPOINT: ${{ github.event.client_payload.shared_matrix_data.results_endpoint }}
          TEST_RUN_HASH: ${{ matrix.test_run.custom_payload.hash }}
          WORKFLOW_ID: ${{ github.run_id }}
          TEST_RESULT_JSON: "[]"
          CANCELLED: true
        run: test -f ${{ github.workspace }}/manager-notified.txt || php src/cli.php notify -r